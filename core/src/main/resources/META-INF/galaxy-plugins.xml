<?xml version="1.0" encoding="UTF-8"?>
<galaxy xmlns="http://www.mulesource.org/schema/galaxy-plugins"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.mulesource.org/schema/galaxy-plugins http://www.mulesource.org/schema/galaxy-plugin/galaxy-plugins-1.0.xsd">
    
    <artifact-type>
        <name>WS-Policy Documents</name>
        <description>Allows WSDL-Policy Documents to be managed by Galaxy.</description>
        <content-type>application/policy+xml</content-type>
        <!--<small-icon>META-INF/images/policy_16x16.png</small-icon>-->
        <!--<large-icon>META-INF/images/policy_32x32.png</large-icon>-->
        <namespace>
            <local-name>policy</local-name>
            <uri>http://schemas.xmlsoap.org/ws/2004/09/policy</uri>
        </namespace>
        <namespace>
            <local-name>policy</local-name>
            <uri>http://http://www.w3.org/2006/07/ws-policy</uri>
        </namespace>
    </artifact-type>

    <artifact-type>
        <name>XML Schemas</name>
        <description>Allows Xml Schema Documents to be managed by Galaxy.</description>
        <content-type>application/xmlschema+xml</content-type>
        <!--<small-icon>META-INF/images/xmlschema_16x16.png</small-icon>-->
        <!--<large-icon>META-INF/images/xmlschema_32x32.png</large-icon>-->
        <namespace>
            <local-name>schema</local-name>
            <uri>http://www.w3.org/2001/XMLSchema</uri>
        </namespace>
        <indexes>
            <index>
                <description>XML Schema Target Namespace</description>
                <indexer>xpath</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>xmlschema.targetNamespace</property>
                  <expression><![CDATA[/*/@targetNamespace]]></expression>
                </configuration>
            </index>
            <index>
                <description>XML Schema Elements</description>
                <indexer>xquery</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>xmlschema.element</property>
                  <expression><![CDATA[
declare namespace xsd="${namespace.uri}";
declare variable $document external;
<values> {
    for $b in $document/xsd:schema/xsd:element
        return <value>{data($b/@name)}</value>
} </values>]]></expression>
              </configuration>
            </index>
            <index>
                <description>XML Schema Complex Types</description>
                <indexer>xquery</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>xmlschema.complexType</property>
                  <expression><![CDATA[
declare namespace xsd="${namespace.uri}";
declare variable $document external;
<values> {
    for $b in $document/xsd:schema/xsd:complexType
        return <value>{data($b/@name)}</value>
} </values>]]></expression>
               </configuration>
            </index>
            <index>
                <description>XML Schema Groups</description>
                <indexer>xquery</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>xmlschema.group</property>
                  <expression><![CDATA[
declare namespace xsd="${namespace.uri}";
declare variable $document external;
<values> {
    for $b in $document/xsd:schema/xsd:group
        return <value>{data($b/@name)}</value>
} </values>]]></expression></configuration>
            </index>
            <index>
                <description>XML Schema Attribute Group</description>
                <indexer>xquery</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>xmlschema.attributeGroup</property>
                  <expression><![CDATA[
declare namespace xsd="${namespace.uri}";
declare variable $document external;
<values> {
    for $b in $document/xsd:schema/xsd:attributeGroup
        return <value>{data($b/@name)}</value>
} </values>]]></expression></configuration>
            </index>
        </indexes>
    </artifact-type>
    

    <artifact-type>
        <name>XSLT Stylesheets</name>
        <description>Allows Xslt Documents to be managed by Galaxy.</description>
        <content-type>application/xslt+xml</content-type>
        <!--<small-icon>META-INF/images/xslt_16x16.png</small-icon>-->
        <!--<large-icon>META-INF/images/xslt_32x32.png</large-icon>-->
        <namespace>
            <local-name>stylesheet</local-name>
            <uri>http://www.w3.org/1999/XSL/Transform</uri>
        </namespace>
    </artifact-type>

    <artifact-type>
        <name>WSDL Documents</name>
        <description>Allows WSDL Documents to be managed by Galaxy. Users can register, query and view WSDL documents with this plugin.
        </description>
        <content-type>application/wsdl+xml</content-type>
        <!--<small-icon>META-INF/images/wsdl_16x16.png</small-icon>-->
        <!--<large-icon>META-INF/images/wsdl_32x32.png</large-icon>-->
        <namespace>
            <local-name>definitions</local-name>
            <uri>http://schemas.xmlsoap.org/wsdl/</uri>
        </namespace>
        <indexes>
            <index>
                <description>WSDL Service</description>
                <indexer>xquery</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>wsdl.service</property>
                  <expression><![CDATA[
declare namespace wsdl="${namespace.uri}";
declare variable $document external;
<values> {
    for $svc in $document//wsdl:service
    let $ns := $document/wsdl:definition/@targetNamespace
    return <value>{data($svc/@name)}</value>
} </values>
                    ]]>
                </expression></configuration>
            </index>
            <index>
                <description>WSDL Endpoint</description>
                <indexer>xquery</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>wsdl.endpoint</property>
                  <expression><![CDATA[
declare namespace wsdl="${namespace.uri}";
declare variable $document external;
<values> {
    for $ep in $document//wsdl:service/wsdl:port
    let $ns := $document/wsdl:definition/@targetNamespace
    return <value>{data($ep/@name)}</value>
} </values>
                    ]]>
                </expression></configuration>
            </index>
            <index>
                <description>WSDL Binding</description>
                <indexer>xquery</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>wsdl.binding</property>
                  <expression><![CDATA[
declare namespace wsdl="${namespace.uri}";
declare variable $document external;
<values> {
    for $b in $document//wsdl:binding
    let $ns := $document/wsdl:definition/@targetNamespace
    return <value>{data($b/@name)}</value>
} </values>
                    ]]>
                </expression></configuration>
            </index>
            <index>
                <description>WSDL PortType</description>
                <indexer>xquery</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>wsdl.portType</property>
                  <expression><![CDATA[
declare namespace wsdl="${namespace.uri}";
declare variable $document external;
<values> {
    for $pt in $document//wsdl:portType
    let $ns := $document/wsdl:definition/@targetNamespace
    return <value>{data($pt/@name)}</value>
} </values>]]></expression>
                </configuration>
            </index>
            <index>
                <description>WSDL Target Namespace</description>
                <indexer>xpath</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>wsdl.targetNamespace</property>
                  <expression><![CDATA[/*/@targetNamespace]]></expression>
                </configuration>
            </index>
        </indexes>
        <views>
            <view>
                <column column="3">
                    <name>Target Namespace</name>
                    <expression>artifact.getProperty("wsdl.targetNamespace")</expression>
                </column>
                <column>
                    <name>Services</name>
                    <expression>artifact.hasProperty("wsdl.service") ? artifact.getProperty("wsdl.service").size() : "0" ;</expression>
                </column>
                <column>
                    <name>Bindings</name>
                    <expression>artifact.hasProperty("wsdl.binding") ? artifact.getProperty("wsdl.binding").size() : "0" ;</expression>
                </column>
                <column>
                    <name>Port Types</name>
                    <expression>artifact.hasProperty("wsdl.portType") ? artifact.getProperty("wsdl.portType").size() : "0" ;</expression>
                </column>
            </view>
        </views>
    </artifact-type>
    
    <artifact-type>
        <name>Spring Configurations</name>
        <description>Allows Spring Bean cofiguration files to be managed by Galaxy. Users can register, query and view Spring
            configuration files with this plugin.
        </description>
        <content-type>application/spring+xml</content-type>
        <!--<small-icon>META-INF/images/spring_16x16.png</small-icon>-->
        <!--<large-icon>META-INF/images/spring_32x32.png</large-icon>-->
        <namespace>
            <local-name>beans</local-name>
            <uri>http://www.springframework.org/schema/beans</uri>
        </namespace>
        <indexes>
            <index>
                <description>Spring configuration description</description>
                <indexer>xpath</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>spring.description</property>
                  <expression><![CDATA[/*[local-name()='${namespace.local-name}' and namespace-uri()='${namespace.uri}']/*[local-name()='description']]]></expression>
                </configuration>
            </index>
            <index>
                <description>Spring Beans</description>
                <indexer>xquery</indexer>
                <search-input-type>java.lang.String</search-input-type>
                <configuration>
                  <property>spring.bean</property>
                  <expression><![CDATA[
declare default element namespace "http://www.springframework.org/schema/beans";
declare variable $document external;
<values> {
    for $e in $document//bean
        return if ($e/@name)
               then <value>{data($e/@name)}</value>
               else <value>{data($e/@id)}</value>
   }</values>
]]></expression>
              </configuration>
            </index>
        </indexes>
        <views>
            <view>
                <column>
                    <name>Beans</name>
                    <expression>artifact.hasProperty("spring.bean") ? artifact.getProperty("spring.bean").size() : "0" ;</expression>
                </column>
            </view>
        </views>
    </artifact-type>
</galaxy>
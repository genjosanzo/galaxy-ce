import org.mule.galaxy.event.*;import org.mule.galaxy.event.annotation.*;import org.mule.galaxy.Registryimport org.mule.galaxy.security.Userimport org.mule.galaxy.Itemimport javax.mail.*;import javax.mail.internet.*;import java.util.Properties;// An event listener which fires emails when new entry versions are created@BindToEvents(["EntryVersionCreated"])public class EmailNotifier {    def String userProperty = "contacts"    def String server = 'smtp.foo.com'    def String port = '465'    def String username = 'XXXX'    def String password = 'XXXX'    def Registry registry        @Async    @OnEvent    void onEvent(EntryVersionCreatedEvent e) {        notifyUsers(e)    }        void notifyUsers(ItemEvent e) {        Properties props = new Properties();        props.setProperty("mail.host", server);        props.setProperty("mail.user", username);        props.setProperty("mail.smtp.port", port);        props.setProperty("mail.password", password);        props.setProperty("mail.smtp.auth", "true");        Item item = registry.getItemById(e.itemId);                def mailSession = Session.getDefaultInstance(props, null);        Transport transport = mailSession.getTransport("smtps");          MimeMessage message = new MimeMessage(mailSession);        message.setSubject("Artifact/entry ${item.name} was created");        message.setContent("Artifact/entry was created in ${item.path}", "text/plain");                def contacts = item.getProperty(userProperty);        contacts?.each {            message.addRecipient(Message.RecipientType.TO,                 new InternetAddress(it.email));        }                if (contacts) return;        transport.connect();        transport.sendMessage(message, message.getAllRecipients());        transport.close();    }}// remove the previous listener, if anyeventManager.listeners.each {    if (it.class.simpleName == "EmailNotifier") {        eventManager.removeListener(it);        System.out.println("Removed listener");    }}// add the event listener againeventManager.addListener(new EmailNotifier(registry: registry));